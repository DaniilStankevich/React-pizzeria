import { useEffect } from 'react';
import { useNavigate } from "react-router-dom";
import { useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { selectFilter, setCategoryId, setCurrentPage, setFilters } from '../redux/slices/filterSlice';
import { fetchPizzas, selectPizzaData} from '../redux/slices/pizzaSlice';

import Categories from '../components/Categories';
import Sort, { list } from '../components/Sort';
import PizzaBlock from '../components/PizzaBlock/';
import Skeleton from '../components/PizzaBlock/Skeleton';
import Pagination from '../components/Pagination';

import qs from 'qs'





export const Home = () => {

  const isSeacrh = useRef(false) 
  const isMounted = useRef(false)
  
  const navigate = useNavigate()
  const dispatch = useDispatch()


  const {items, status} = useSelector(selectPizzaData)
  const {categoryId, sort, currentPage, search} = useSelector(selectFilter)



const onChangeCategory = (id) => {
    dispatch(setCategoryId(id))  
}


const onChangePage = (number) => {
    dispatch(setCurrentPage( number ))
}


const getPizzas = async () => {

  const sortBy = sort.sortProperty.replace('-', '');                // –ø–æ —á–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (rating, price, name) 
  const order = sort.sortProperty.includes('-')? 'asc' : 'desc';    // —É–±—ã–≤–∞–Ω–∏—é-–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
  const category = categoryId > 0 ? `category=${categoryId}` : '';
  const searchHome = search ? `&search=${search}` : '';

  dispatch(fetchPizzas({
          sortBy,
          order,
          category,
          searchHome,
          currentPage   }))
}



// –ü–ï–†–ï–•–û–î –ù–ê –°–ü–ê–†–°–ï–ù–´–ô –ê–î–†–ï–°
useEffect(() => {


  if(isMounted.current) {
    const qeryString = qs.stringify({       //qs.stringify - –¥–µ–ª–∞–µ–º —Å—Ç—Ä–æ–∫—É

      sortProperty: sort.sortProperty,      
      categoryId,
      currentPage
   })

   navigate(`?${qeryString}`);  // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Å–ø–∞—Ç—á–∞ - qeryString
  }                             // –≤—Å—Ç–∞–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ 

  isMounted.current = true;
}, [categoryId, sort.sortProperty, currentPage]) 




//console.log('(------Render home-------)')



// –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redux
// –°—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
useEffect(() => {


  if (window.location.search) {

    const params = qs.parse(window.location.search.substring(1))  // qs.parse - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–ø–∞—Ä–∏—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Å—ã–ª–∫–∏ –≤ –æ–±—ä–µ–∫—Ç 
    const sort = list.find(obj => obj.sortProperty === params.sortProperty)
  
    dispatch(setFilters({ ...params, sort }))

    isSeacrh.current = true; 
  }
}, [])



useEffect (() => {

    if( !isSeacrh.current ) {
        getPizzas();
    }

    isSeacrh.current = false

}, [categoryId, sort.sortProperty, search, currentPage, /* isMounted.current */ ])  





const pizzas =  items.map((obj) => (<PizzaBlock key={obj.id}  {...obj}   /* title={item.name} price={item.price}imageUrl={item.imageUrl} sizes={item.sizes} types={item.types}  */ />))
const skeleton = [ ...new Array(4)].map((_, index)  =>  <Skeleton key={index}/> )


return (
<div className="container">
  <div className="content__top">
        <Categories value={categoryId} onChangeCategory={onChangeCategory} funPage={setCurrentPage}/>
        <Sort/>
  </div>   
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
    
    {status === 'error' ? <div className="content__error-info">
      
        <h2> –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è üòï</h2>
          <p> –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç—Å—ã.
        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</p> </div> :  

      <div className="content__items"> {status === 'loading' ? skeleton : pizzas}</div>} 

      <Pagination  currentPage={currentPage}   onChangePage={onChangePage}/>
</div>
)}

export default Home


/* –î–æ–ø —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª 

1. –ë–µ–∑ —Ü–∏—Ñ—Ä –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–µ 
2. –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
3. –î–æ–±–∞–≤–∏–ª–µ–Ω–∏–µ –ø–∏—Ü—Ü —Ä–∞–∑–Ω—ã –∫–∞—Ç–µ–æ–≥–æ—Ä–∏–π –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ 
4. –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–∑–∞–ø—Ä–æ—Å) - done 

5. –°–µ–ª–µ–∫—Ç—ã
6. –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '123' —É—Å–ª–æ–≤–∏–µ. –°—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω—ã–µ –ø—Ä–∏ –≥–æ–ª–æ–π –æ—à–∏–±–∫–µ –∏ –æ—à–∏–±–∫–∏ –±–µ–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ 123



1. Side effects
*/


